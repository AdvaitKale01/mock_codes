from typing import Literal
from langchain_core.messages import HumanMessage
from langchain_google_genai import ChatGoogleGenerativeAI
from langgraph.graph import StateGraph, MessagesState, START, END
from langgraph.checkpoint.memory import MemorySaver

# Initialize Google Generative AI (Gemini Model)
model = ChatGoogleGenerativeAI(
    api_key="your-google-genai-api-key",  # Replace with your actual API key
)

# Function to call the Gemini model
def call_gemini_model(state: MessagesState):
    messages = state["messages"]
    response = model.invoke(messages)
    return {"messages": [response]}

# Function to determine the next step in the graph
def determine_next_step(state: MessagesState) -> Literal["get_input", END]:
    messages = state["messages"]
    last_message = messages[-1]
    if last_message.tool_calls:
        return "get_input"  # Continue to the next node
    return END  # Stop traversal when no further input is required

# Real-time user input function
def get_user_input(state: MessagesState):
    last_message = state["messages"][-1].content
    print(f"IVR Message: {last_message}")
    user_input = input("Your response (e.g., 'Press 2' or 'Claims Status'): ")
    return {"messages": [HumanMessage(content=user_input)]}

# Set up the StateGraph for IVR simulation
ivr_workflow = StateGraph(MessagesState)

# Define the nodes
ivr_workflow.add_node("agent", call_gemini_model)
ivr_workflow.add_node("get_input", get_user_input)

# Define edges
ivr_workflow.add_edge(START, "agent")
ivr_workflow.add_conditional_edges("agent", determine_next_step)
ivr_workflow.add_edge("get_input", "agent")

# Memory for saving state
checkpointer = MemorySaver()

# Compile the graph
ivr_app = ivr_workflow.compile(checkpointer=checkpointer)

# Run the IVR simulation
def run_ivr_simulation():
    print("Starting IVR simulation...\n")
    conversation_history = []
    tree_structure = []

    # Initial prompt
    initial_prompt = "Welcome to the insurance IVR system. How can I assist you today?"
    input_message = [HumanMessage(content=initial_prompt)]

    final_state = ivr_app.invoke(
        {"messages": input_message},
        config={"configurable": {"thread_id": 42}},
    )

    # Collect and display the conversation history
    for msg in final_state["messages"]:
        conversation_history.append(msg.content)
        tree_structure.append(msg.content)

    print("\nConversation History:")
    for step, message in enumerate(conversation_history, 1):
        print(f"{step}: {message}")

    print("\nFinal Tree Structure:")
    print(tree_structure)

run_ivr_simulation()
